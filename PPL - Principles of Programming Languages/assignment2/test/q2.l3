(define empty?
  (lambda (lst)
    (if (eq? lst '())
        #t
        #f)
  )
)

(define last-element
   (lambda (lst)
     (if (empty? (cdr lst))
     (car lst)
     (last-element (cdr lst)))
  )
)


(define zero?
  (lambda (n)
    (if (eq? n 0)
        #t
        #f)
  )
)

(define length
  (lambda (lst)
    (if (empty? lst)
        0
        (+ 1 (length (cdr lst))))))


(define power
    (lambda (n1 n2)
      (if (zero? n2)
      1
      (* n1 (power n1 (- n2 1))))
    )
)

(define sum-lst-power
    (lambda (lst n)
       (if (empty? lst)
          0
          (+ (power (car lst) n) (sum-lst-power (cdr lst) n)))  
    )
)
      
  
(define num-from-digits
  (lambda (lst)
     (if (empty? lst)
         0
         (+ (* (car lst) (power 10 (length (cdr lst)))) (num-from-digits (cdr lst))))
  )
)

(define is-narcissistic
  (lambda (lst)
      (if (zero? (- (num-from-digits lst) (is-narcissistic-helper lst (length lst))))
      #t
      #f)
    )
)

(define is-narcissistic-helper
  (lambda (lst n)
    (if (empty? lst)
        0
        (+ (power (car lst) n) (is-narcissistic-helper (cdr lst) n)))
    )
)

